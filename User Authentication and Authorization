from flask import Flask, request, jsonify
from flask_jwt_extended import JWTManager, create_access_token, jwt_required, decode_token
import bcrypt

app = Flask(__name__)
app.config['JWT_SECRET_KEY'] = 'your_jwt_secret_key'
jwt = JWTManager(app)

# In-memory user store (replace with a database in production)
users_db = {}

# User registration
@app.route('/register', methods=['POST'])
def register():
    data = request.json
    username = data['username']
    password = data['password']
    hashed_pw = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt())
    users_db[username] = hashed_pw
    return jsonify({'message': 'User registered successfully'}), 201

# User login
@app.route('/login', methods=['POST'])
def login():
    data = request.json
    username = data['username']
    password = data['password']
    hashed_pw = users_db.get(username)
    if hashed_pw and bcrypt.checkpw(password.encode('utf-8'), hashed_pw):
        access_token = create_access_token(identity=username)
        return jsonify({'access_token': access_token})
    else:
        return jsonify({'error': 'Invalid credentials'}), 401

# Protected route
@app.route('/protected', methods=['GET'])
@jwt_required()
def protected():
    return jsonify({'message': 'You have access to this resource'}), 200

if __name__ == '__main__':
    app.run(debug=True)
